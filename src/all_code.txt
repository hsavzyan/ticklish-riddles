html,
body {
  height: 100%;
  font-family: "Comic Sans MS", "Chalkboard SE", "Comic Neue", cursive;
  background: url("/assets/bg4.png") no-repeat center center fixed;
  background-size: cover;
  color: #4b0082;
  line-height: 1.6;
  font-size: 1.2em;
}
/* EndScreen.css */
.end-screen {
  display: grid;
  place-items: center;
  max-height: 100vh;
  overflow: auto;
  height: 100vh;
  text-align: center;
  padding: 20px;
  background: rgba(255, 255, 255, 0.4);
  backdrop-filter: blur(10px);
  margin: 0;
}

.congrats-text {
  font-size: 1.7em; /* Decrease the font size */
  color: #ff4500;
  text-shadow: 2px 2px 8px rgba(0, 0, 0, 0.2);
  margin: 0;
}

.end-screen-text {
  font-size: 1.3em; /* Decrease the font size */
  color: #4b0082;
  text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.2);
  margin: 10px;
}

.congrats-image {
  max-width: 400px;
  width: 65%;
  height: auto;
  margin: 20px auto;
  margin-top: 0;
  margin-bottom: 0;
  border-radius: 20px;
  box-shadow: 0px 10px 30px rgba(0, 0, 0, 0.2);
}

.end-screen-btns {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 20px;
}

.play-again-btn,
.return-home-btn {
  background-color: #32cd32;
  color: white;
  padding: 15px;
  border: none;
  border-radius: 50px;
  font-size: 1.2em;
  cursor: pointer;
  transition: 0.3s;
  font-weight: bold;
  box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.2);
  margin: 0;
  width: 350px;
}

.play-again-btn:hover,
.return-home-btn:hover {
  transform: scale(1.1);
  background-color: #ffd700;
}
/* eslint-disable react/prop-types */

import { useState } from "react";
import "./RiddleModal.css";

function RiddleModal({ riddle, handleUserChoice }) {
  const [hintShown, setHintShown] = useState(false);

  const handleHintClick = () => {
    setHintShown(!hintShown);
  };

  return (
    <div className="riddle-modal-parent">
      <div className="riddle-modal">
        <h2 className="riddle-question">{riddle.question}</h2>
        <div className="riddle-image-container">
          <img
            className="riddle-image"
            src={riddle.image.src}
            alt={riddle.image.alt}
          />
          <button
            className={`hint-btn ${hintShown ? "hint-shown" : ""}`}
            onClick={handleHintClick}
          >
            {hintShown ? "Hide Hint" : "Hint"}
          </button>
          {hintShown && (
            <div className="hint-text">
              <p>{riddle.hint}</p>
            </div>
          )}
        </div>
        <div className="choices-container">
          {riddle.choices.map(
            (choice, index) =>
              index % 2 === 0 && (
                <button
                  className="choice-btn"
                  key={index}
                  onClick={() => handleUserChoice(index)}
                >
                  {choice.text}
                </button>
              )
          )}
        </div>
        <div className="choices-container">
          {riddle.choices.map(
            (choice, index) =>
              index % 2 !== 0 && (
                <button
                  className="choice-btn"
                  key={index}
                  onClick={() => handleUserChoice(index)}
                >
                  {choice.text}
                </button>
              )
          )}
        </div>
      </div>
    </div>
  );
}

export default RiddleModal;
/* eslint-disable react/prop-types */
import "./Homepage.css";

function Homepage({ startGame }) {
  return (
    <div className="homepage">
      <h1 className="site-title">Ticklish Riddles</h1>
      <p className="site-tagline">Think, laugh, repeat!</p>
      <p className="intro-text">
        Get ready for a riddle-filled thrill ride at Ticklish Riddles. Hold
        tight to your humor and let's roll!
      </p>
      <button className="start-btn" onClick={startGame}>
        Start
      </button>
    </div>
  );
}
export default Homepage;
.feedback-modal-parent {
  display: flex;
  justify-content: center;
  align-items: center;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  z-index: 10;
}

.feedback-modal {
  perspective: 1000px;
  /* animation: flipInX 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards; */
  animation: bounceIn 1s both;

  max-height: 90vh;
  overflow: auto;
  width: 400px;
  padding: 20px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  border-radius: 10px;
  text-align: center;
  background-color: #fdf5e6;
  z-index: 11; /* a higher z-index than the parent */
  /* transform: translate(-50%, -50%);
  position: relative;
  left: 50%;
  top: 50%; */
}

.feedback-text {
  font-size: 1.2em;
  margin-bottom: 20px;
  margin-top: 0;
}

.feedback-text.correct {
  color: #32cd32;
  font-weight: bold;
  text-shadow: 0px 0px 5px rgba(50, 205, 50, 0.5);
}

.feedback-text.incorrect {
  color: #dc3545;
  font-weight: bold;
  text-shadow: 0px 0px 5px rgba(220, 53, 69, 0.5);
}

.feedback-image {
  width: 100%;
  height: auto;
  margin-bottom: 20px;
  border-radius: 10px;
}

.retry-btn {
  background-color: #ff5722;
  color: white;
}

.next-btn {
  background-color: #4caf50;
  color: white;
}

.modal-btns {
  display: flex;
  justify-content: space-around;
}

button {
  padding: 15px 30px;
  margin: 0;
  border: none;
  border-radius: 50px;
  cursor: pointer;
  transition: 0.3s;
  font-size: 21.6px; /* Increase font size */
  font-weight: bold;
  box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.2);
}

button:hover {
  transform: scale(1.1);
}

/* @keyframes flipInX {
  from {
    transform: perspective(400px) rotateX(90deg);
    opacity: 0;
  }
  40% {
    transform: perspective(400px) rotateX(-10deg);
  }
  60% {
    transform: perspective(400px) rotateX(5deg);
  }
  80% {
    transform: perspective(400px) rotateX(-2deg);
  }
  to {
    transform: perspective(400px);
    opacity: 1;
  }
} */

@keyframes bounceIn {
  0% {
    transform: translate3d(0, -3000px, 0);
    visibility: visible;
  }

  60% {
    transform: translate3d(0, 25px, 0);
  }

  75% {
    transform: translate3d(0, -10px, 0);
  }

  90% {
    transform: translate3d(0, 5px, 0);
  }

  100% {
    transform: none;
  }
}
button {
  padding: 15px 30px;
  margin: 20px;
  border: none;
  border-radius: 50px;
  background-color: #32cd32;
  color: #fff;
  cursor: pointer;
  transition: 0.3s;
  font-size: 21.6px; /* Increase font size */
  font-weight: bold;
  box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.2);
}

button:hover {
  transform: scale(1.1);
}

.homepage {
  text-align: center;
  padding: 20px;
  border-radius: 15px;
  max-width: 700px; /* Adjust to your liking */
  margin-left: auto;
  margin-right: auto;
}

.site-title {
  font-size: 3em; /* Increase font size */
  font-weight: bold;
  text-transform: uppercase;
  color: #ff4500;
  text-shadow: 2px 2px 8px rgba(0, 0, 0, 0.2);
  margin-top: 10px; /* Reduce top margin to move title up */
  margin-bottom: 10px;
}

.site-tagline {
  font-size: 2.4em; /* Increase font size */
  font-style: italic;
  color: #4b0082;
  text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.2);
}

.intro-text {
  font-weight: bold;

  font-size: 1.44em; /* Increase font size */
  text-shadow: 2px 2px 8px rgba(0, 0, 0, 0.3);
}

.start-btn {
  padding: 20px 40px;
  font-size: 1.8em; /* Increase font size */
  background-color: #ffd700;
  color: #4b0082;
}

.footer {
  background-color: #fdf5e6;
  padding: 20px;
  position: fixed;
  width: 100%;
  bottom: 0;
  text-align: center;
}
/* eslint-disable react/prop-types */

import "./FeedbackModal.css";

function FeedbackModal({
  correct,
  riddle,
  moveToNextRiddle,
  userChoice,
  resetUserChoice,
}) {
  return (
    <div className="feedback-modal-parent">
      <div className="feedback-modal">
        <h2 className={`feedback-text ${correct ? "correct" : "incorrect"}`}>
          {correct
            ? riddle.choices[riddle.correctChoiceIndex].feedback
            : riddle.choices[userChoice].feedback}
        </h2>
        <img
          className="feedback-image"
          src={
            correct
              ? riddle.correctAnswerImage.src
              : riddle.incorrectAnswerImage.src
          }
          alt={
            correct
              ? riddle.correctAnswerImage.alt
              : riddle.incorrectAnswerImage.alt
          }
        />
        <div className="modal-btns">
          {!correct && (
            <button className="retry-btn" onClick={resetUserChoice}>
              Try Again
            </button>
          )}
          <button className="next-btn" onClick={moveToNextRiddle}>
            Next
          </button>
        </div>
      </div>
    </div>
  );
}

export default FeedbackModal;
/* eslint-disable react/prop-types */
import "./EndScreen.css";

function EndScreen({ resetGame, returnToHomepage }) {
  return (
    <div className="end-screen">
      <h1 className="congrats-text">Congratulations!</h1>
      <p className="end-screen-text">You've gone through all the riddles!</p>
      <img
        className="congrats-image"
        src="/assets/congrats-image.png"
        alt="Congratulations"
      />
      <div className="end-screen-btns">
        <button className="play-again-btn" onClick={resetGame}>
          Play Again
        </button>
        <button className="return-home-btn" onClick={returnToHomepage}>
          Return to Homepage
        </button>
      </div>
    </div>
  );
}

export default EndScreen;
.riddle-modal-parent {
  display: flex;
  justify-content: center;
  align-items: center;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 10; /* set a high z-index to ensure modal is displayed above other content */
  background: rgba(
    0,
    0,
    0,
    0.5
  ); /* optional: you might want a semi-transparent background */
}

.riddle-modal {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 20px;
  padding: 20px;
  border-radius: 10px;
  max-width: 800px;
  max-height: 90vh;
  overflow: auto;
  background-color: #fdf5e6;

  /* margin: 20px auto; */
  box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.2);
  grid-template-areas:
    "question image"
    "choices1 choices2";
}

.riddle-question {
  grid-area: question;
  font-size: 1.2em;
  font-weight: bold;
  text-align: center;
  padding: 20px;
}

.riddle-image-container {
  position: relative;
  grid-area: image;
  max-width: 100%;
  height: auto;
  align-self: center;
}

.hint-btn {
  position: absolute;
  bottom: 0;
  right: 0;
  background-color: green; /* you can choose any color */
  color: white;
  border: none;
  padding: 10px;
  cursor: pointer;
  transition: 0.3s;
}

.hint-btn.hint-shown {
  background-color: grey;
}

.hint-text {
  position: absolute;
  bottom: 40px; /* adjust as needed */
  right: 0;
  background-color: rgba(255, 255, 255, 0.8);
  color: black;
  padding: 10px;
  width: 80%; /* adjust as needed */
  text-align: center;
}

.riddle-image {
  grid-area: image;
  max-width: 100%;
  height: auto;
  align-self: center;
}

.choices-container {
  padding: 0;
  margin: 0;
  display: flex;
  flex-direction: column;
  justify-content: center;
  gap: 20px;
}

.choices-container:nth-child(odd) {
  grid-area: choices1;
}

.choices-container:nth-child(even) {
  grid-area: choices2;
}

.choice-btn {
  box-sizing: border-box;
  padding: 10px;
  margin: 0;
  border: none;
  border-radius: 5px;
  color: #fff;
  cursor: pointer;
  transition: 0.3s;
  width: 100%;
  height: 70px;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: #ff4500;
  text-align: center;
}

.choice-btn:hover {
  transform: scale(1.1);
}

@media (max-width: 768px) {
  .riddle-modal {
    grid-template-columns: 1fr;
    grid-template-areas:
      "question"
      "image"
      "choices1"
      "choices2";
  }
}
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App.jsx";

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
import { useState, useEffect } from "react";
import Homepage from "./components/Homepage";
import RiddleModal from "./components/RiddleModal";
import FeedbackModal from "./components/FeedbackModal";
import riddlesData from "./riddles.json";
import EndScreen from "./components/EndScreen";
import "./App.css";

function App() {
  const [riddles, setRiddles] = useState([]);
  const [currentRiddle, setCurrentRiddle] = useState(null);
  const [userChoice, setUserChoice] = useState(null);
  const [correct, setCorrect] = useState(false);
  const [showFeedbackModal, setShowFeedbackModal] = useState(false);
  const [gameStarted, setGameStarted] = useState(false);

  useEffect(() => {
    setRiddles(riddlesData.riddles);
  }, []);

  useEffect(() => {
    if (gameStarted && riddles.length) {
      startGame();
    }
  }, [riddles, gameStarted]);

  const returnToHomepage = () => {
    setRiddles(riddlesData.riddles);
    setCurrentRiddle(null);
    setUserChoice(null);
    setCorrect(false);
    setShowFeedbackModal(false);
    setGameStarted(false);
  };

  const resetGame = () => {
    setRiddles(riddlesData.riddles);
    setCurrentRiddle(null);
    setUserChoice(null);
    setCorrect(false);
    setShowFeedbackModal(false);
    setGameStarted(false);
    startGame();
  };

  const startGame = () => {
    setGameStarted(true);
    const randomRiddle = riddles[Math.floor(Math.random() * riddles.length)];
    setCurrentRiddle(randomRiddle);
  };

  const handleUserChoice = (choice) => {
    setUserChoice(choice);
    setShowFeedbackModal(true);
    setCorrect(currentRiddle.correctChoiceIndex === choice);
  };

  const resetUserChoice = () => {
    setUserChoice(null);
    setShowFeedbackModal(false);
  };

  const moveToNextRiddle = () => {
    setShowFeedbackModal(false);
    const newRiddles = riddles.filter((r) => r.id !== currentRiddle.id);
    setRiddles(newRiddles);
    if (newRiddles.length > 0) {
      const randomRiddle =
        newRiddles[Math.floor(Math.random() * newRiddles.length)];
      setCurrentRiddle(randomRiddle);
    } else {
      setCurrentRiddle(null);
    }
  };

  return (
    <div className="App">
      {!currentRiddle && !showFeedbackModal && !gameStarted && (
        <Homepage startGame={startGame} />
      )}
      {currentRiddle && !showFeedbackModal && (
        <RiddleModal
          riddle={currentRiddle}
          handleUserChoice={handleUserChoice}
        />
      )}
      {showFeedbackModal && (
        <FeedbackModal
          correct={correct}
          riddle={currentRiddle}
          moveToNextRiddle={moveToNextRiddle}
          userChoice={userChoice}
          resetUserChoice={resetUserChoice}
        />
      )}
      {riddles.length === 0 && !showFeedbackModal && gameStarted && (
        <EndScreen resetGame={resetGame} returnToHomepage={returnToHomepage} />
      )}
    </div>
  );
}

export default App;
